// Code generated by go-bindata.
// sources:
// assets/admin/index.html
// assets/css/all.css
// assets/js/all.js
// assets/js/component.js
// assets/web/index.html
// assets/web/r.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsAdminIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x01\x51\x0a\x39\x89\x79\xe9\xb6\x4a\xa9\x79\x4a\x20\x81\xd4\xc4\x14\x3b\x2e\x05\x20\xb0\xc9\x4d\x2d\x49\x54\x48\xce\x48\x2c\x2a\x4e\x2d\xb1\x55\x0a\x0d\x71\xd3\xb5\x50\x82\x4a\x95\x64\x96\xe4\xa4\xda\x85\x80\x48\x1b\x7d\x08\x87\xcb\x46\x1f\xa2\xd7\x26\x29\x3f\xa5\xd2\x8e\x0b\xc8\x87\x30\x80\xe2\x20\xbb\x00\x01\x00\x00\xff\xff\xea\x84\x61\xa8\x7b\x00\x00\x00")

func assetsAdminIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsAdminIndexHtml,
		"assets/admin/index.html",
	)
}

func assetsAdminIndexHtml() (*asset, error) {
	bytes, err := assetsAdminIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/admin/index.html", size: 123, mode: os.FileMode(420), modTime: time.Unix(1484187149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsCssAllCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x4b\xcb\xcf\x2f\x49\x2d\x52\xa8\xe6\x52\x00\x82\xa4\xc4\xe4\xec\xf4\xa2\xfc\xd2\xbc\x14\xdd\xe4\xfc\x9c\xfc\x22\x2b\x85\xf2\x8c\xcc\x92\x54\x6b\xb0\x64\x41\x62\x4a\x4a\x66\x5e\xba\x95\x82\x61\x51\x6a\xae\x82\xa1\x9e\x29\x90\xb2\xe6\xaa\x05\x04\x00\x00\xff\xff\xcc\x4a\x21\x56\x42\x00\x00\x00")

func assetsCssAllCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsCssAllCss,
		"assets/css/all.css",
	)
}

func assetsCssAllCss() (*asset, error) {
	bytes, err := assetsCssAllCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/css/all.css", size: 66, mode: os.FileMode(420), modTime: time.Unix(1484641488, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsAllJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x49\x2d\x51\x48\x2c\x28\x50\xb0\x55\xc8\x4b\x2d\x57\x08\x2b\x4d\xd5\xa8\xe6\x52\x00\x82\xd4\x1c\x2b\x05\x75\x65\xa0\x8c\x3a\x57\xad\xa6\x35\x20\x00\x00\xff\xff\x0e\x2a\xe6\xc0\x26\x00\x00\x00")

func assetsJsAllJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsAllJs,
		"assets/js/all.js",
	)
}

func assetsJsAllJs() (*asset, error) {
	bytes, err := assetsJsAllJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/all.js", size: 38, mode: os.FileMode(420), modTime: time.Unix(1484641233, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsComponentJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\x4d\x8f\xd3\x30\x10\xbd\xe7\x57\x58\xb9\x04\x24\x12\xab\xd7\x92\x56\x82\x52\x41\x0f\x08\x09\x02\xa7\x5e\x5c\x67\x12\x5b\x24\xb6\xb1\x27\xa8\x08\xed\x7f\x5f\xa7\x49\xdc\x74\xdb\xae\xda\x4b\xe7\xe3\x79\xde\xcc\x7b\xf9\xd5\x41\xc6\x75\x6b\xb4\x02\x85\x6f\x92\x56\xf3\xdf\x36\x15\xc0\x4a\xb0\xc9\x3b\xf2\x3f\x22\xfe\x87\xd0\x9a\x86\x21\x2c\x49\xb2\x8f\xf2\x52\xfe\x25\xbc\x61\xce\xad\x62\xae\x15\x32\xa9\xc0\xc6\xeb\xfd\x09\x99\x2b\x16\x9a\x3e\x0c\xe5\xd9\x1b\x5f\x4e\x1b\xa8\x30\xf4\xd8\xbc\x23\x3d\x57\x4c\x84\x85\x6a\x15\xd3\x00\x11\x8b\x09\x83\x12\x1b\x88\xd7\x5f\xfb\x35\x73\x2a\x16\x13\x82\xb2\x10\x79\xae\x3b\xb4\x56\xd6\x02\x49\x1f\xb5\xa0\xba\x07\x16\x28\x35\x77\x13\xec\xd3\xb7\xcd\x8f\x2b\xb2\xfb\x4f\x83\x24\x9b\xef\xdb\x0f\xc5\xf6\xf1\x97\x02\xd1\xb8\x25\x0d\xc7\x7f\xde\x15\x5f\x7e\x7e\x7c\xf5\x4c\xea\x67\xf8\x78\x5e\x4b\xa2\xa7\xb7\xef\xa3\x28\xba\x69\x6f\xa5\x35\xde\xb5\x77\x68\x4e\xdb\x0d\xd9\x2d\x1f\xaf\xbd\x7f\xd1\xf4\x84\x44\x30\x97\x22\x1c\x31\xe5\x3e\x03\x0b\x65\x00\x9b\x29\x70\x68\xb5\xaa\x27\x47\xc7\x8c\x1c\xfe\xf5\x12\x5d\x2a\x52\x4b\x14\xdd\xa1\x3f\x87\x1e\xbb\x3f\x52\xd5\x15\xa8\x3a\x5e\x9f\xe3\x5e\x9e\x6c\x18\x5b\x08\x20\x4e\x77\x96\x03\xe1\xba\x04\x22\x1d\x69\xa4\x5f\xc2\x41\x79\x39\xd8\xcf\xd5\xc6\xd7\x4f\xd8\x4c\xdb\x9a\x8e\x38\x47\x5b\x89\xe9\x98\x64\x46\x18\xff\xd5\xed\x8a\x91\x22\xa7\x66\x26\xf8\xf9\x7f\x90\x6b\xee\xc1\x73\x00\x00\x00\xff\xff\x90\x8a\x69\xcd\x60\x03\x00\x00")

func assetsJsComponentJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsComponentJs,
		"assets/js/component.js",
	)
}

func assetsJsComponentJs() (*asset, error) {
	bytes, err := assetsJsComponentJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/component.js", size: 864, mode: os.FileMode(420), modTime: time.Unix(1484641300, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsWebIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\xcd\x6e\xe3\x36\x10\xbe\xfb\x29\xb8\x3a\xc7\xd6\xee\x76\x0f\x3d\xc8\x5e\x04\xd9\xee\xa9\x45\x0b\x74\x5b\xa0\xc7\x31\x39\xb6\x26\xa1\x48\x85\x1c\xba\x9b\xb7\xef\x50\x92\x13\xdb\x91\x63\x23\x68\x80\x02\x35\x0f\xb6\xa8\xf9\x86\xf3\xc3\x6f\x46\x12\xab\x77\x5f\x7e\xbd\xf9\xf6\xd7\x6f\x3f\xa9\x9a\x1b\xbb\x98\x54\xf9\x4f\x59\x70\xeb\x79\x81\xae\xc8\x37\x10\xcc\x62\xa2\x64\x54\x0d\x32\x28\x5d\x43\x88\xc8\xf3\xe2\x8f\x6f\x5f\xa7\x3f\x16\x83\x88\x89\x2d\x2e\x7e\xf1\xfa\x2e\x54\x65\x3f\xe9\x05\x96\xdc\x9d\x0a\x68\xe7\x45\xe4\x07\x8b\xb1\x46\xe4\x42\xd5\x01\x57\xf3\xa2\x2c\xb5\x71\xb7\x71\xa6\xad\x4f\x66\x65\x21\xe0\x4c\xfb\xa6\x84\x5b\xf8\x5e\x5a\x5a\xc6\x72\x99\x6c\x03\xe5\xfb\xd9\x0f\xb3\xf7\xa5\x8e\xc3\x7c\x26\x57\xc5\x39\xab\x43\x14\x3f\x63\xa7\x08\xd6\x0e\x6a\x55\xd9\x07\x54\x2d\xbd\x79\x58\x4c\x26\x95\xa1\x8d\x22\x33\x2f\xa0\x6d\x45\x3c\x04\x9a\xe3\x98\x66\x20\x86\x45\x55\xee\x4d\x07\x48\x44\xcd\xe4\x9d\xd2\x56\xcc\x88\xf9\x7e\x3a\xf8\xd5\x21\xf2\xc2\x83\x54\x7b\xc7\x40\x0e\xc3\x8e\xbc\xc3\xd4\x1f\xb6\x90\x2e\x67\xaa\x86\x38\x65\xfc\xce\x53\x8d\x8e\x31\xa0\x29\xb6\x39\xad\x3f\x1c\xaa\x7e\x7c\xb4\x9d\x96\x47\xb5\xf7\x74\xf2\xf8\xd9\x07\x6c\x14\xb5\x31\x35\xca\x78\xeb\x83\x8a\xc4\x0a\x64\x6b\xaf\x94\xb8\x99\xe3\x40\x4e\x41\x81\xa1\x96\x22\x69\x72\x6b\x85\x96\x78\xa6\x6e\xb2\xf4\x3e\x25\x97\xc5\x06\x97\xc4\x14\x15\xc2\x7d\x42\x45\xb0\xef\x5b\x59\x7f\xdc\x49\x44\x29\x99\x18\xf6\xab\x1c\xf2\xf4\xef\x66\x71\x0f\x63\x53\xe3\xe2\x48\xe0\xcf\x51\xc5\x62\xc7\xb5\x53\xd0\x67\xa0\x0e\x08\x5b\xd8\x32\x31\x4b\x1c\x14\xa7\x6d\xa0\x06\xc2\x43\xbe\xf4\x89\x85\xa0\x68\xba\xdb\xc9\x5a\x34\xd3\x40\xeb\x9a\x8f\xac\x96\xc7\x9f\x84\x7f\xab\xdf\xa1\x69\x2d\x8e\x5b\x2c\x61\xc4\xdf\x37\x08\x83\xdc\xca\x1f\x89\xc1\xe2\xea\xa9\xc8\x0e\x37\x63\x77\xdc\x04\x04\x46\xd5\x31\xf8\x4d\xa2\x19\x81\x1e\xdc\x7a\x7b\xf2\x3d\xd5\xe1\xd1\x22\xfc\x2a\x69\x48\x01\xe3\x7e\x5d\x8c\x07\x75\x2e\x75\x8f\x6c\x64\x60\xd2\xe2\xc4\x00\x6e\xd0\x10\xbc\xb0\x41\xbb\x0b\x77\xd8\x69\x0e\x53\xfc\x7e\x41\x67\x2c\x31\xa7\x35\xfa\x54\x7d\x5a\xd8\xae\xfd\x74\xbf\x92\x8d\x4f\xa7\x95\x5e\xdf\xaf\xbe\xd0\xda\x51\x8c\xd4\x78\x69\x53\xf2\x28\x50\x6d\xf0\x1b\x32\xe2\xeb\x49\xa3\xf7\x09\x22\xa9\x08\xd8\xe2\x67\x75\xad\xc0\xd2\x7d\x22\xd3\xdb\x17\x6f\x4c\xd2\xd4\x24\x59\x75\x83\x8e\x90\xe5\xf1\x71\x25\xe5\x21\x4c\xb7\xb0\xf4\x41\x1c\x6d\x7d\xb6\x9b\xe2\x95\xac\xe4\xe3\x49\x73\x01\xdb\x24\xc9\x77\x06\x50\x8c\xb6\x94\x89\x23\x61\x3a\xee\x62\x8d\x29\x6a\x89\x4d\xe2\xdd\xc8\xde\xb7\x2c\x25\x15\x1f\x2f\x53\xf3\xee\xe5\x9d\x1a\x2f\xa6\x33\xc4\x52\x9b\x3d\x99\xde\xa2\xdf\x5c\x68\xfa\x48\xd3\x6b\x56\x2b\xd0\xd2\x28\x3a\x8d\xcc\x28\x68\xe4\x2f\xf8\xcf\x27\x8d\x5e\x6b\x9d\x22\x74\x3c\xeb\x28\x2a\x8a\x20\xf6\x80\xf3\x33\xd9\xa0\x95\xb5\x98\x54\x26\x68\x8a\xec\x55\x03\x6b\x27\x90\x0e\x27\x7c\x86\x2b\x95\x7d\x0e\x98\x19\x2b\x74\xa5\xbc\xc4\xf8\x53\x67\x77\x30\x36\xad\x0f\xa0\x12\x6f\x49\xf8\xc4\x46\x6c\x66\xff\x09\x36\x0e\xb7\x2e\xad\xf6\xd2\x6a\x0f\xc6\xa5\xd5\xfe\x8f\x69\x7a\x69\xb5\xe7\x88\x5f\xd5\x6a\x47\xa6\xcf\xde\xb7\xfb\xcf\xe8\x95\xf7\xbc\xf3\x55\x3d\x4c\x27\xdb\x96\x5d\x45\x1d\xa8\x95\x52\x0c\x3a\x1f\x10\x24\xd7\xde\xad\xbb\x53\x81\x4d\x42\x81\x44\xce\x17\xb3\xdb\x98\x5f\xfe\x7b\xe8\xe2\x40\x67\xf8\xec\xbf\x95\x2f\x7f\x2f\xf9\x73\x42\xc5\x33\xf1\xf9\x94\xe0\x00\x59\xf6\xc7\x04\xc2\xcc\x7c\x3c\xf2\x4f\x00\x00\x00\xff\xff\x2e\x50\xf3\x47\x2e\x11\x00\x00")

func assetsWebIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsWebIndexHtml,
		"assets/web/index.html",
	)
}

func assetsWebIndexHtml() (*asset, error) {
	bytes, err := assetsWebIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/web/index.html", size: 4398, mode: os.FileMode(420), modTime: time.Unix(1484641244, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsWebRHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x4d\x73\xd3\x30\x10\xbd\xe7\x57\x18\x5f\x99\x44\x19\xb8\x70\x90\x3d\xd3\x8f\x40\x19\x28\xe9\xd0\xf4\xc0\x51\xb1\xb7\xb1\x12\x59\xd2\x58\x72\xa7\xf9\xf7\xac\x64\xa7\x24\x9e\xd8\xb5\x69\x0b\x65\x86\x5c\x22\x79\xdf\x5b\xad\xf6\xc9\x5a\x2f\x7d\x73\x3e\x3f\x5b\xfc\xb8\x9a\x05\x99\xcd\x45\x3c\xa2\xee\x2f\x10\x4c\xae\xa2\x10\x64\xe8\x1e\x00\x4b\xe3\x51\x80\x3f\x9a\x83\x65\x41\x92\xb1\xc2\x80\x8d\xc2\x9b\xc5\xc7\xf1\x87\xb0\x36\x59\x6e\x05\xc4\x97\x2a\xd9\x14\x94\x54\x93\xca\x20\xb8\xdc\x04\x05\x88\x28\x34\x76\x2b\xc0\x64\x00\x36\x0c\xb2\x02\x6e\xa3\x90\x90\x24\x95\x6b\x33\x49\x84\x2a\xd3\x5b\xc1\x0a\x98\x24\x2a\x27\x6c\xcd\xee\x89\xe0\x4b\x43\x96\xa5\xc8\x19\x99\x4e\xde\x4f\xa6\x24\x31\xf5\x7c\x82\xa3\xb0\x8f\x77\x66\x30\x4e\xe3\x89\x4c\x88\x9a\x46\x49\xb5\x21\xba\x54\xe9\x36\x1e\x8d\x68\xca\xef\x02\x9e\x46\x21\xd3\x1a\xcd\xf5\x46\xdd\x3e\xc6\x0e\x08\x45\x4c\xc9\xc1\xb4\x86\x38\x5a\x22\x70\x89\x28\x4c\x94\xb4\x8c\x4b\x28\xea\xa8\xbc\x5d\xb2\x07\xbb\x66\x12\xc4\x9e\xcd\xdb\xf5\x81\xd5\x3b\xe7\x72\xd5\x40\xb9\xdf\x69\xc9\x05\xae\x7b\xc8\x26\xba\xe1\x6e\x2f\x9c\xca\xe1\x52\x60\xd0\x47\xdc\x35\x03\x2f\x54\x33\xb4\xe1\xc8\x4a\x0a\xb6\x04\xb1\xc3\xfb\x49\x18\x5f\x5b\x66\x4b\x43\x89\x9f\xb6\xac\x42\x70\x99\x16\x93\x6e\x2c\x1f\x64\xcc\x8c\x59\x9a\x2a\x69\xba\x22\xe1\x52\x97\x36\xb0\x5b\x0d\x51\x28\xcb\x7c\x89\xc2\x04\x5a\xb0\x04\x32\xe5\x32\x19\x85\xef\xa6\xd3\x70\xe7\xda\x83\xfb\x7a\xb3\x70\x6f\x1b\xbe\xe6\x5f\xfa\xbb\x62\x3b\xe4\xb2\xb4\x56\xe1\xdb\xf5\x96\x12\xd6\x96\x16\xfd\x62\xaa\x5c\xf8\x83\xfc\x57\x65\x39\x92\x48\xc9\x72\x78\x36\x55\xee\x98\x28\x07\x78\x7b\x25\xc2\x9c\x29\xb5\xe1\xf0\x5f\x98\x5f\xde\x5e\x89\x30\xdf\xc1\x68\x4c\x22\x04\xa7\x58\x34\xfe\xb4\x3c\x2e\x8b\x58\x1a\x1f\x52\xb1\x9b\x37\x32\xeb\xea\x59\xe0\x3c\x83\xc4\x94\x62\x11\xae\x61\x4f\xcf\x56\xc0\xcd\x78\x55\xa8\x52\x43\xda\x15\xe7\xa0\x34\x7b\xc6\xb1\x54\x5f\x82\xcd\x54\xda\x99\xe3\x2a\xfe\xd6\x3c\x7b\x73\x33\xd7\x6d\x35\xce\x60\xb5\xdc\x41\x0d\x08\x48\x3a\x8f\x63\x85\x78\x64\x57\x4a\x5b\xae\x64\xfc\x69\xb6\xa0\xa4\x1e\xf7\x22\x5c\xcd\xaf\x87\x32\x6e\x86\x12\x4e\x16\x67\x17\xc3\x28\xe7\xb3\xaf\xb3\xc5\x6c\x18\xe7\x62\x76\x72\x3e\x8c\x31\xbf\x5a\x7c\x9e\x7f\xbb\x7e\x9c\x44\x49\x97\x06\x68\x45\x3d\xbb\xd8\x2d\xa7\xde\x1b\x9f\xe7\x00\xe7\x3c\x87\x05\x5e\x7f\xff\xec\x11\xde\x69\x82\x1f\xc4\x82\x27\xcc\x8d\xc9\xda\x28\xd9\x47\xd1\x1d\xd7\x5d\x3e\xc4\xb5\x12\x83\x49\x78\xa7\xf1\x1e\x4b\xbd\xd0\x39\xe8\xba\xbe\x3b\x2f\x46\x37\xd4\xa5\x10\x90\x8e\x0b\xbe\xca\x3a\x25\xe8\x29\xec\x03\xbe\xaa\x7d\x87\x95\xd0\xad\xe7\x9a\x1f\x5f\x9b\xc0\x52\x52\x3d\xfe\xdd\xa3\xff\x5c\x21\xe9\x82\xe7\xac\xd8\xe2\xa7\x0c\x56\x1e\x0b\x4f\x08\xab\x45\x89\x23\x8f\x1b\x8f\x28\xc1\xd6\xab\x6e\x0f\x2b\xcb\x7e\x4f\x77\xab\x94\xdd\xeb\xe9\xea\x29\xb6\x81\x35\x94\x9a\xa4\xe0\xda\x06\xa6\x48\x5c\x7f\x5a\x4a\xbd\x59\xf9\xa6\xf4\xae\x04\x84\x18\xeb\x06\x93\xb5\x71\x15\xb6\x82\xc6\x0d\x4e\xdd\x75\xae\xb1\xf1\x54\x39\x7e\x35\x60\x39\xee\x89\x77\x4d\x6a\x03\x49\xaa\x2e\x95\xfa\x77\x29\xfe\x19\x00\x00\xff\xff\xe8\x61\xbb\x3a\xad\x0f\x00\x00")

func assetsWebRHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsWebRHtml,
		"assets/web/r.html",
	)
}

func assetsWebRHtml() (*asset, error) {
	bytes, err := assetsWebRHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/web/r.html", size: 4013, mode: os.FileMode(420), modTime: time.Unix(1484641265, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/admin/index.html": assetsAdminIndexHtml,
	"assets/css/all.css": assetsCssAllCss,
	"assets/js/all.js": assetsJsAllJs,
	"assets/js/component.js": assetsJsComponentJs,
	"assets/web/index.html": assetsWebIndexHtml,
	"assets/web/r.html": assetsWebRHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"admin": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{assetsAdminIndexHtml, map[string]*bintree{}},
		}},
		"css": &bintree{nil, map[string]*bintree{
			"all.css": &bintree{assetsCssAllCss, map[string]*bintree{}},
		}},
		"js": &bintree{nil, map[string]*bintree{
			"all.js": &bintree{assetsJsAllJs, map[string]*bintree{}},
			"component.js": &bintree{assetsJsComponentJs, map[string]*bintree{}},
		}},
		"web": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{assetsWebIndexHtml, map[string]*bintree{}},
			"r.html": &bintree{assetsWebRHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

