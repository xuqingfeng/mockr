// Code generated by go-bindata.
// sources:
// assets/admin/index.html
// assets/css/all.css
// assets/js/all.js
// assets/js/component.js
// assets/web/index.html
// assets/web/r.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsAdminIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x01\x51\x0a\x39\x89\x79\xe9\xb6\x4a\xa9\x79\x4a\x20\x81\xd4\xc4\x14\x3b\x2e\x05\x20\xb0\xc9\x4d\x2d\x49\x54\x48\xce\x48\x2c\x2a\x4e\x2d\xb1\x55\x0a\x0d\x71\xd3\xb5\x50\x82\x4a\x95\x64\x96\xe4\xa4\xda\x85\x80\x48\x1b\x7d\x08\x87\xcb\x46\x1f\xa2\xd7\x26\x29\x3f\xa5\xd2\x8e\x0b\xc8\x87\x30\x80\xe2\x20\xbb\x00\x01\x00\x00\xff\xff\xea\x84\x61\xa8\x7b\x00\x00\x00")

func assetsAdminIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsAdminIndexHtml,
		"assets/admin/index.html",
	)
}

func assetsAdminIndexHtml() (*asset, error) {
	bytes, err := assetsAdminIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/admin/index.html", size: 123, mode: os.FileMode(420), modTime: time.Unix(1484187149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsCssAllCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8a\x2e\xd3\x4d\xce\xc9\x4f\xcc\x8e\x55\xa8\xe6\x52\x00\x82\x94\xcc\xe2\x82\x9c\xc4\x4a\x2b\x85\xbc\xfc\xbc\x54\x6b\xae\x5a\x2e\x2e\xbd\xb4\xfc\xfc\x92\xd4\x22\xa8\x7c\x52\x62\x72\x76\x7a\x51\x7e\x69\x5e\x8a\x6e\x72\x7e\x4e\x7e\x91\x95\x42\x79\x46\x66\x09\x50\x25\x48\xb2\x20\x31\x25\x25\x33\x2f\xdd\x4a\xc1\xb0\x28\x35\x57\xc1\x50\xcf\x14\x48\x01\xcd\x00\x04\x00\x00\xff\xff\x03\x6c\x86\x3d\x64\x00\x00\x00")

func assetsCssAllCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsCssAllCss,
		"assets/css/all.css",
	)
}

func assetsCssAllCss() (*asset, error) {
	bytes, err := assetsCssAllCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/css/all.css", size: 100, mode: os.FileMode(420), modTime: time.Unix(1485057103, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsAllJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x49\x2d\x51\x48\x2c\x28\x50\xb0\x55\xc8\x4b\x2d\x57\x08\x2b\x4d\xd5\xa8\xe6\x52\x00\x82\xd4\x1c\x2b\x05\x75\x65\xa0\x8c\x3a\x57\xad\xa6\x35\x20\x00\x00\xff\xff\x0e\x2a\xe6\xc0\x26\x00\x00\x00")

func assetsJsAllJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsAllJs,
		"assets/js/all.js",
	)
}

func assetsJsAllJs() (*asset, error) {
	bytes, err := assetsJsAllJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/all.js", size: 38, mode: os.FileMode(420), modTime: time.Unix(1484641233, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsComponentJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\x4d\x8f\xd3\x30\x10\xbd\xe7\x57\x58\xb9\x04\x24\x12\xab\xd7\x92\x56\x82\x52\x41\x0f\x08\x09\x02\xa7\x5e\x5c\x67\x12\x5b\x24\xb6\xb1\x27\xa8\x08\xed\x7f\x5f\xa7\x49\xdc\x74\xdb\xae\xda\x4b\xe7\xe3\x79\xde\xcc\x7b\xf9\xd5\x41\xc6\x75\x6b\xb4\x02\x85\x6f\x92\x56\xf3\xdf\x36\x15\xc0\x4a\xb0\xc9\x3b\xf2\x3f\x22\xfe\x87\xd0\x9a\x86\x21\x2c\x49\xb2\x8f\xf2\x52\xfe\x25\xbc\x61\xce\xad\x62\xae\x15\x32\xa9\xc0\xc6\xeb\xfd\x09\x99\x2b\x16\x9a\x3e\x0c\xe5\xd9\x1b\x5f\x4e\x1b\xa8\x30\xf4\xd8\xbc\x23\x3d\x57\x4c\x84\x85\x6a\x15\xd3\x00\x11\x8b\x09\x83\x12\x1b\x88\xd7\x5f\xfb\x35\x73\x2a\x16\x13\x82\xb2\x10\x79\xae\x3b\xb4\x56\xd6\x02\x49\x1f\xb5\xa0\xba\x07\x16\x28\x35\x77\x13\xec\xd3\xb7\xcd\x8f\x2b\xb2\xfb\x4f\x83\x24\x9b\xef\xdb\x0f\xc5\xf6\xf1\x97\x02\xd1\xb8\x25\x0d\xc7\x7f\xde\x15\x5f\x7e\x7e\x7c\xf5\x4c\xea\x67\xf8\x78\x5e\x4b\xa2\xa7\xb7\xef\xa3\x28\xba\x69\x6f\xa5\x35\xde\xb5\x77\x68\x4e\xdb\x0d\xd9\x2d\x1f\xaf\xbd\x7f\xd1\xf4\x84\x44\x30\x97\x22\x1c\x31\xe5\x3e\x03\x0b\x65\x00\x9b\x29\x70\x68\xb5\xaa\x27\x47\xc7\x8c\x1c\xfe\xf5\x12\x5d\x2a\x52\x4b\x14\xdd\xa1\x3f\x87\x1e\xbb\x3f\x52\xd5\x15\xa8\x3a\x5e\x9f\xe3\x5e\x9e\x6c\x18\x5b\x08\x20\x4e\x77\x96\x03\xe1\xba\x04\x22\x1d\x69\xa4\x5f\xc2\x41\x79\x39\xd8\xcf\xd5\xc6\xd7\x4f\xd8\x4c\xdb\x9a\x8e\x38\x47\x5b\x89\xe9\x98\x64\x46\x18\xff\xd5\xed\x8a\x91\x22\xa7\x66\x26\xf8\xf9\x7f\x90\x6b\xee\xc1\x73\x00\x00\x00\xff\xff\x90\x8a\x69\xcd\x60\x03\x00\x00")

func assetsJsComponentJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsComponentJs,
		"assets/js/component.js",
	)
}

func assetsJsComponentJs() (*asset, error) {
	bytes, err := assetsJsComponentJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/component.js", size: 864, mode: os.FileMode(420), modTime: time.Unix(1484641300, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsWebIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\xdb\x72\xdb\x36\x13\xbe\xf7\x53\xc0\xbc\x36\xc5\x24\x7f\x2e\xfe\xe9\x50\xca\xb8\x8e\xd3\x66\xa6\x99\x76\x1a\xa5\x33\xbd\x84\x88\x95\x08\x1b\x27\xe3\xa0\xda\x6f\xdf\x05\x48\x1d\x2c\x45\x14\xa9\x49\x93\x66\x2a\x5e\xd8\x80\xf0\x2d\xf6\x80\xfd\x76\x25\xb0\xbc\x7c\xfb\xeb\xcd\xf4\xcf\xdf\x6e\x49\xed\xa5\x98\x5c\x94\xf1\x1f\x11\x54\x2d\xc6\x19\xa8\x2c\x7e\x00\x94\x4d\x2e\x08\x3e\xa5\x04\x4f\x49\x55\x53\xeb\xc0\x8f\xb3\x4f\xd3\x77\xf9\xff\xb3\x76\xc9\x73\x2f\x60\xf2\x41\x57\xf7\xb6\x2c\x9a\x49\xb3\x20\xb8\xba\x27\x16\xc4\x38\x73\xfe\x49\x80\xab\x01\x7c\x46\x6a\x0b\xf3\x71\x56\x14\x15\x53\x77\x6e\x54\x09\x1d\xd8\x5c\x50\x0b\xa3\x4a\xcb\x82\xde\xd1\xc7\x42\xf0\x99\x2b\x66\x41\x48\x5a\xbc\x18\xfd\x6f\xf4\xa2\xa8\x5c\x3b\x1f\xe1\x28\xeb\xb3\x3b\x75\x68\xa7\x4b\x82\x54\x88\x56\xac\x2c\x1a\x87\xca\x99\x66\x4f\x93\x8b\x8b\x92\xf1\x25\xe1\x6c\x9c\x51\x63\x32\xb2\xcc\xd1\x16\x7a\x8f\x9f\xa7\xed\x1d\x54\x9e\x6b\x45\x2a\x81\x7b\x8d\xb3\x1a\xac\x26\xdc\xe5\xf3\x20\x44\x0d\x7c\x51\xfb\xac\x45\x26\xf4\x65\x9e\x97\x32\x46\x20\x8f\x2a\xc0\x4e\xca\xe2\xd9\x34\xcf\x27\x1b\x70\x54\xbb\xb5\x6d\xc2\x64\x9b\xf5\x5d\x4c\xa5\x95\xa7\x5c\x81\xdd\xc1\x24\x9c\xa2\x6b\x1c\x0e\x3f\x83\xd8\xdd\x0d\x51\xb9\x80\xb9\x3f\x00\x4d\x70\xba\x0d\xe6\x1e\xe4\x3a\xae\x1d\x52\x49\xb2\x7e\xb9\x12\x4d\x89\x90\xad\xd2\xa2\x7e\xd9\xa1\xae\xa0\x07\xcc\x2e\xd0\xee\x7e\x1e\xd9\x78\x22\x24\x8e\x24\xa8\x70\x9a\x6f\x4c\x57\xee\x88\x7f\x48\x98\x8f\xc3\xfd\x38\xa2\xf7\x73\xe7\xba\xfd\xdc\xfc\x7e\x7b\x3d\xbd\xfd\xd2\x6a\x6b\xef\x8d\xfb\xa1\x28\x16\xdc\xd7\x61\x96\xc8\xf7\x18\x1e\xb8\x5a\xcc\x41\x2d\x9a\xe4\x3d\x62\xd7\x4f\xef\xa7\x3f\x7f\xfa\xf1\x8b\x1d\x6b\x59\xa0\x89\x3b\x2c\x78\x8e\x6c\xa7\x87\x89\x14\x79\xdd\x93\x48\xfb\xea\x77\x08\xdf\x4e\x7b\x30\xaa\x8b\x9f\x6b\xfc\x0e\x31\x48\x4d\x5d\xee\xe1\xd1\xe7\x15\x28\x0f\x16\x58\x3f\xaa\xd4\xaf\xd6\xf6\x85\xd9\xc1\x9d\x3a\x8f\xed\x17\x6d\x41\x12\x6e\x5c\x90\x84\x69\xa1\x2d\x71\xdc\x13\x8a\x05\xfe\x8a\xa0\x2b\xd1\x6f\xf0\xc1\x12\xca\xb8\xe1\x8e\x57\x98\x12\x04\x04\xf7\x23\x72\x13\x57\x1f\x42\x50\x71\x99\xc1\x8c\x7b\xee\x08\xd0\x87\x00\x84\xd3\x8e\x3c\xa8\x5f\x0d\x4c\x84\x36\xf6\x5f\xff\x94\x9e\xe1\x45\x90\xea\x58\x41\xd8\x97\xc8\x26\x1d\x65\xab\x4b\xac\x53\x20\x09\xad\xb9\x3c\x0b\xde\x63\x0c\xb0\x1d\x19\xcb\x25\xb5\x4f\x71\xa8\x83\xc7\x96\x08\x2c\x7d\x8c\x5d\x0a\x58\x53\x15\x7b\xec\x1c\x9f\x3f\x38\xfc\x45\x3e\x52\x69\x04\x1c\xb7\xa4\xab\xe4\x34\x80\xaf\x17\x02\xae\xe6\xfa\x80\xff\xa9\xcf\xf5\x2d\xb3\xab\xe7\xc6\x02\xf5\x40\x12\x1b\xbf\x59\x24\x8e\x88\x75\x75\xc6\x7f\x1d\xa9\x36\x35\xeb\x60\xc1\x7a\x87\x21\x0f\x16\xdc\xe1\x5a\xb1\xaf\xf9\x54\x7a\xf6\x48\x32\xeb\x79\x85\x86\xb6\x82\x12\x18\xa7\x3d\x93\x67\x5b\x61\x92\xcb\x63\x88\xd0\xcf\x9e\xf2\xfb\x46\x0f\x95\x4e\x3b\xd4\xaf\x27\x22\x95\xf9\xf4\x17\xa3\xfa\x7a\xd8\x06\xa7\xf7\x88\xb7\x7c\xa1\xb8\x73\x5c\x6a\x6c\x0d\xf8\x25\x7c\x90\x5a\x63\xf5\x92\x33\xf4\x77\x90\xd4\x43\xa0\x8e\x13\x47\xc1\xc0\x1b\x72\x4d\xa8\xe0\x0f\x81\xb3\xc6\x6e\xf4\x82\x85\x8a\xcb\x80\xd6\x2c\x41\x71\xf0\xf8\x85\xff\x0a\x4b\x04\x32\x5c\xd0\x99\xb6\xe8\xa0\xd1\xd1\xde\xe0\xae\x70\x27\xed\x06\xa9\xb6\x60\x02\x1e\xb2\x62\x14\xd0\x00\xc3\x63\x42\x63\xa8\x94\x4f\xf1\x72\xc1\x55\x18\x1f\x8c\xd9\x12\x73\xcf\x78\x2c\x2b\x6e\x3d\x0c\xf2\xb2\x7f\x46\x1c\x2f\x22\x03\xa1\x58\xb7\x9a\x24\xff\x56\x75\xfc\x4c\xb1\x93\x29\x76\xed\xc9\x9c\x56\x58\x38\x93\x44\xcc\x6a\x2a\x07\xa9\x5e\xe2\x77\xe5\x37\x83\x24\xae\xab\x2a\x38\x9a\x38\x92\xe8\x45\x25\xa1\x68\x27\xf5\xf1\xbb\x1f\x03\x81\x36\x78\x4e\x22\xb9\x82\xf3\x9a\x48\xba\x50\x08\x49\x38\xe4\x22\xbd\x22\xd1\x57\x0b\xc8\xb6\x41\x6a\x91\x96\x3c\xaa\x1b\x56\x45\xf0\x47\x8e\xd1\x96\x92\xe0\x57\x64\xdb\xb0\x0e\xe4\xe8\xbb\x67\xdd\xee\xcf\xa0\xbd\xf5\x73\x9b\xec\xb9\xc3\xb9\x4d\x9e\xdb\xe4\x11\xd8\xb9\x4d\x7e\xaf\x14\x3b\xb7\xc9\xee\xe7\x3f\xd2\x26\x07\x2c\x6d\xfd\x46\xee\x40\xef\xdd\x42\x6e\xee\xfe\xe7\x5a\xfb\xad\xbb\xff\x76\xda\x79\xf7\x1f\x31\xa7\xde\xfd\x37\xfb\xaf\xa0\xcd\xec\x1f\xb9\x09\x4b\xcc\x1f\x7c\xd1\x58\x9a\x1e\x47\xed\xbc\xd5\x6a\xb1\xba\xfb\x6c\x67\x64\xf6\x14\xaf\x7a\x7a\x5c\x54\x67\x93\xcd\x38\xde\xc5\x1c\x4f\xdb\x69\x8d\x05\x41\x07\x5b\x61\x55\xd5\x0c\xb0\xc7\x11\xc1\xd1\x23\x07\x0c\x75\xf6\x4a\xe3\x8d\x5d\x68\x96\x36\x28\x9b\xf6\x1b\x69\xbb\x28\xda\xbd\x5c\x21\xb9\xcf\xdb\xc9\xc8\xd4\x26\x9b\x7c\x78\x3f\x3d\x6e\x61\x59\x74\x04\xed\x94\x8c\x6e\x73\xb0\x47\x42\x37\xc3\x35\x03\x56\x69\x5e\xba\xca\x72\x83\x5d\xda\x56\xf1\xad\x5d\x50\xe6\x7e\x91\x0e\x61\x19\x00\x21\xce\xc7\xc1\xe8\xce\xc5\x3b\xab\x06\x3a\xd9\x91\x69\xdf\xc5\xdd\xb9\x02\xc5\x8c\x56\x98\x3d\x3d\xf1\xf1\xd5\xdd\x0e\xb2\x68\xde\xdd\x61\x23\x89\xef\x2c\xff\x0e\x00\x00\xff\xff\x94\x96\xe9\xef\xc3\x1c\x00\x00")

func assetsWebIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsWebIndexHtml,
		"assets/web/index.html",
	)
}

func assetsWebIndexHtml() (*asset, error) {
	bytes, err := assetsWebIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/web/index.html", size: 7363, mode: os.FileMode(420), modTime: time.Unix(1485058798, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsWebRHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\x70\x75\x2d\x64\x66\xdb\x4b\x51\xc8\x02\x12\xc7\xdd\x04\xed\xd6\xc1\x46\x39\xf4\x48\x4b\x63\x8b\x36\x25\xb2\x22\x15\x24\xff\xbe\x43\x4a\xf2\x3a\xaa\xf5\xe1\x40\x2d\x82\xa0\xb9\x84\xb4\xde\x23\x87\x7c\x33\xe4\x70\x82\x4f\x37\xab\x45\xf4\xe7\xfd\x92\xa4\x26\x13\xe1\x45\x60\xff\x11\xc1\xf2\xed\xdc\x83\xdc\xb3\x3f\x00\x4b\xc2\x0b\x82\x7f\x41\x06\x86\x91\x38\x65\x85\x06\x33\xf7\x1e\xa3\x5f\xfd\x9f\xbd\xfa\x93\xe1\x46\x40\xf8\x55\xc6\xfb\x22\xa0\x55\xa7\xfa\x20\x78\xbe\x27\x05\x88\xb9\xa7\xcd\x8b\x00\x9d\x02\x18\x8f\xa4\x05\x6c\xe6\x1e\xa5\x71\x92\xef\xf4\x2c\x16\xb2\x4c\x36\x82\x15\x30\x8b\x65\x46\xd9\x8e\x3d\x53\xc1\xd7\x9a\xae\x4b\x91\x31\x7a\x39\xfb\x69\x76\x49\x63\x5d\xf7\x67\xd8\xf2\xc6\x8c\xce\x34\xda\xa9\x1d\x91\x09\x51\xd3\x02\x5a\x2d\x28\x58\xcb\xe4\x25\xbc\xb8\x08\x12\xfe\x44\x78\x32\xf7\x98\x52\x1e\x79\xf2\xd1\x16\xb6\xc7\xdf\xdd\xf0\x9f\x7c\x3f\xc8\xec\x9a\x7c\x4b\x82\x22\x0c\xe8\xab\xae\xef\xd7\x76\x68\x88\x0d\x97\x39\x89\x05\x4e\x3a\xf7\x52\x28\x24\xe1\xda\xdf\x94\x42\xa4\xc0\xb7\xa9\xa9\x0d\x76\x60\x3b\xe3\x11\xd0\x0d\x76\xf4\xbd\x8d\x89\x65\x6e\x18\xcf\xa1\x68\x61\x1c\x2e\x67\x07\x1c\x36\x4f\x20\xda\xa3\x21\xca\x17\xb0\x31\x1d\x50\x07\x67\xc7\x60\x6e\x20\x3b\x6c\x69\x0f\xcb\x31\xd3\xcf\x0d\xd5\xf9\x80\xd7\x78\x44\xfa\xb9\x67\x3a\xca\x3a\xcc\xa6\x68\xf7\xb8\x15\x15\x76\x8f\x89\x6d\x65\x90\x97\x6f\x5b\x5b\x22\x63\x3d\xb0\x3e\x8c\x95\x87\xf3\xd7\x31\x30\xef\x29\x5d\x8f\xff\x16\xdf\x96\x57\xd1\x72\xea\x69\x53\x63\x94\xfe\x85\xd2\x2d\x37\x69\xb9\x76\x71\xf7\x5c\xfe\xc5\xf3\xed\x06\xf2\x6d\xe5\xe5\x03\x76\x7d\xb9\x8b\x6e\x1f\xaf\x27\x93\x35\xa0\x68\x62\x2b\x0a\x5e\x23\xeb\x6e\x77\x20\xd9\x90\x9e\x20\x90\x14\xcb\x41\x74\x85\x92\x7a\x85\x72\xb1\x8b\x9b\xd6\xb3\x55\xd7\x25\x17\x78\x56\x74\x6c\x85\x1a\xf6\xef\x6a\xa2\xb5\x40\x49\xfa\x1c\xbb\xb5\xd0\x42\x76\x2d\xe1\xed\x0c\xc7\x12\x6c\x0d\xa2\xe1\xb9\x8e\x17\x3e\x18\x66\x4a\x1d\x50\xd7\x1d\x98\xb5\x3b\xa8\x0f\x10\xd5\x32\x8b\xa4\x4c\xfb\x2c\x49\x64\x3e\x14\xa0\x8e\xce\x73\x55\x1a\x62\x5e\x14\xa0\xdb\x97\xd9\x1a\x05\x27\x4a\xb0\x18\x52\x69\x95\x98\x7b\x3f\x5e\x5e\x7a\xcd\x14\x0e\x7c\xee\xa8\x06\x9e\x4d\x6b\xcc\xd5\x6f\xe7\x0f\x79\x08\xce\x75\x69\x8c\xc4\xdb\xf6\x87\xde\x60\x76\x9c\x2e\x8f\x39\x00\xa6\x53\xf5\xd6\x5d\x72\xef\x52\xd6\x13\x02\xe4\x2c\x83\xc9\x55\x7d\x62\xa2\x7c\xc3\xa8\xef\x5c\xd8\x85\x94\x7b\x0e\xff\x0b\xfb\xe1\x84\xfd\x06\x5a\xe1\xa6\x03\xb9\xc6\x9b\xf0\xbd\xc8\x6b\x77\x1f\x53\xfb\xc3\xd6\x35\xfd\x96\x22\xf6\xf2\x26\x76\x06\xc8\x51\x0a\x7c\x44\xd4\xb0\xe9\x77\xd7\x66\xe6\xdb\x42\x96\x0a\xda\x69\xf7\xc8\x01\x46\xb0\x1c\xf3\x94\x44\x5f\xc1\xa4\x32\x19\xa5\x4d\xb5\xbe\x41\x7d\x1c\xac\xad\x51\x57\xfa\xa2\x31\x9b\x68\xa0\x1a\x04\x3e\x5b\xfa\x72\x8a\x0a\x31\xb0\xc1\x52\xd9\xa7\x4f\xf8\x65\x19\x05\xb4\x6e\x8f\x22\xdc\xaf\x1e\xce\x65\x3c\x9e\x4b\xb8\x8a\x16\xb7\xe7\x51\x6e\x96\xbf\x2f\xa3\xe5\x79\x9c\xdb\xe5\xd5\xcd\x79\x8c\xd5\x7d\x74\xb7\xfa\xe3\x61\x98\x14\xd0\x3e\x0d\xf0\x2b\xea\x39\xc6\x8b\x06\xa2\xc4\x81\xa6\x75\xf4\x8c\x67\x10\xe1\xf1\xfb\x61\x5c\xbd\xd1\x8e\x29\x25\x78\xcc\x6c\x9b\xee\xb4\xcc\xc7\x28\xdf\x70\xed\xa1\x46\x6d\x89\xe5\x6c\x12\x9e\x95\x7c\xc4\x54\xff\x91\xbf\x8c\xb9\x36\x7a\x0f\x5e\xdb\x54\xa5\x10\x90\x54\x6f\xf7\x31\x07\xf1\x48\xe1\xff\xc1\xab\xee\xea\xd7\x37\xb7\x9d\xdf\x16\x8f\xdc\x9d\x09\x26\xa0\xd5\xcf\x53\x85\xd2\xd4\xa6\xaa\x82\x67\xac\xc0\xc7\xed\x02\x6f\x44\x03\x13\x9a\x3b\xa0\x64\x5f\x0d\xe6\x5f\x7b\xc7\x6f\xa4\x6c\x3b\xc4\x51\x29\xce\x7e\x3d\x2a\xc5\xd5\xdd\xa6\x14\x77\x6a\xd0\xde\x87\x7f\xc5\x6f\xa0\x55\x6f\x44\x1d\xad\x6f\xcc\x2e\x3c\x66\x36\x2e\x77\xb2\x01\xed\xc7\xd8\x83\x62\x30\x05\x09\xc6\xb8\x9b\x46\x1f\xcb\xb7\x4d\xb1\xad\xee\x91\xf5\x8b\x4d\x58\x47\x94\x7b\xbc\xf0\x7b\xdb\xe6\xb3\xb3\xc1\x19\xa3\x14\x88\x96\x65\x11\x03\xa6\x6c\x09\xa0\x8b\x12\x3c\x13\x01\x53\xcf\x04\xe7\x1c\xe5\xeb\xdf\xed\x42\xb3\xa4\x42\xae\x1b\x6f\x26\x8b\x2d\xad\xc7\xd2\x34\xe3\xc6\xaf\x3b\x33\x95\x2a\x4c\x9f\xee\xa2\x61\x0b\x7b\x9d\xfe\x2d\x1e\x5d\xfb\xd8\x08\xa7\xae\x9a\x75\x39\xd8\x96\x97\x6b\x5f\x0f\x74\x5c\x70\x65\x88\x2e\x62\x5b\xf7\x2e\x73\xb5\xdf\x3a\x15\x9e\x4a\x40\x88\x36\xb6\x31\xdb\x69\x9b\xf9\x56\xd0\xb0\xc5\xa9\xab\xd9\x3b\x4d\x91\x86\x59\x3e\xba\xcf\x48\xbc\x2d\x7e\xb7\x90\xb4\xaa\x7e\x07\xee\x2e\x0a\xff\x0e\x00\x00\xff\xff\xf3\xf0\xf3\x26\x05\x18\x00\x00")

func assetsWebRHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsWebRHtml,
		"assets/web/r.html",
	)
}

func assetsWebRHtml() (*asset, error) {
	bytes, err := assetsWebRHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/web/r.html", size: 6149, mode: os.FileMode(420), modTime: time.Unix(1485058976, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/admin/index.html": assetsAdminIndexHtml,
	"assets/css/all.css": assetsCssAllCss,
	"assets/js/all.js": assetsJsAllJs,
	"assets/js/component.js": assetsJsComponentJs,
	"assets/web/index.html": assetsWebIndexHtml,
	"assets/web/r.html": assetsWebRHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"admin": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{assetsAdminIndexHtml, map[string]*bintree{}},
		}},
		"css": &bintree{nil, map[string]*bintree{
			"all.css": &bintree{assetsCssAllCss, map[string]*bintree{}},
		}},
		"js": &bintree{nil, map[string]*bintree{
			"all.js": &bintree{assetsJsAllJs, map[string]*bintree{}},
			"component.js": &bintree{assetsJsComponentJs, map[string]*bintree{}},
		}},
		"web": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{assetsWebIndexHtml, map[string]*bintree{}},
			"r.html": &bintree{assetsWebRHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

