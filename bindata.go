// Code generated by go-bindata.
// sources:
// assets/admin/index.html
// assets/css/all.css
// assets/js/hello.js
// assets/web/index.html
// assets/web/r.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsAdminIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x01\x51\x0a\x39\x89\x79\xe9\xb6\x4a\xa9\x79\x4a\x20\x81\xd4\xc4\x14\x3b\x2e\x05\x20\xb0\xc9\x4d\x2d\x49\x54\x48\xce\x48\x2c\x2a\x4e\x2d\xb1\x55\x0a\x0d\x71\xd3\xb5\x50\x82\x4a\x95\x64\x96\xe4\xa4\xda\x85\x80\x48\x1b\x7d\x08\x87\xcb\x46\x1f\xa2\xd7\x26\x29\x3f\xa5\xd2\x8e\x0b\xc8\x87\x30\x80\xe2\x20\xbb\x00\x01\x00\x00\xff\xff\xea\x84\x61\xa8\x7b\x00\x00\x00")

func assetsAdminIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsAdminIndexHtml,
		"assets/admin/index.html",
	)
}

func assetsAdminIndexHtml() (*asset, error) {
	bytes, err := assetsAdminIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/admin/index.html", size: 123, mode: os.FileMode(420), modTime: time.Unix(1484187149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsCssAllCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x4b\xcb\xcf\x2f\x49\x2d\x52\xa8\xe6\x52\x00\x82\xa4\xc4\xe4\xec\xf4\xa2\xfc\xd2\xbc\x14\xdd\xe4\xfc\x9c\xfc\x22\x2b\x85\xf2\x8c\xcc\x92\x54\x6b\xae\x5a\x40\x00\x00\x00\xff\xff\xa4\x16\x3e\x83\x28\x00\x00\x00")

func assetsCssAllCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsCssAllCss,
		"assets/css/all.css",
	)
}

func assetsCssAllCss() (*asset, error) {
	bytes, err := assetsCssAllCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/css/all.css", size: 40, mode: os.FileMode(420), modTime: time.Unix(1484534152, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsHelloJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4b\x2c\x52\xc8\x54\xb0\x55\x30\xb0\xe6\x02\x04\x00\x00\xff\xff\xa8\xf3\x1b\x7c\x0b\x00\x00\x00")

func assetsJsHelloJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsHelloJs,
		"assets/js/hello.js",
	)
}

func assetsJsHelloJs() (*asset, error) {
	bytes, err := assetsJsHelloJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/hello.js", size: 11, mode: os.FileMode(420), modTime: time.Unix(1484536440, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsWebIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x4b\x73\xdb\x36\x10\xbe\xeb\x57\x20\x3c\x5b\x42\x92\xe6\xd0\xe9\x50\xea\xb8\x8e\xd3\x66\xa6\x9d\x76\x1a\xa5\x33\x3d\x42\xc0\x4a\xdc\x04\x0f\x0a\x0f\xd7\xfe\xf7\x5d\x80\xa4\xad\x07\x65\x7b\x1c\x4f\x2f\x35\x0f\x36\xc0\x5d\xec\x7e\xd8\xfd\x76\x05\xb0\x7e\xf5\xfe\xf7\x8b\xe5\xdf\x7f\x5c\xb2\x26\x1a\xbd\x98\xd4\xf9\x1f\xd3\xc2\x6e\xe6\x15\xd8\x2a\xbf\x00\xa1\x16\x13\x46\x4f\x6d\x20\x0a\x26\x1b\xe1\x03\xc4\x79\xf5\x79\xf9\x61\xfa\x7d\xd5\x8b\x22\x46\x0d\x8b\xdf\x9c\xfc\xea\x6b\xde\x4d\x3a\x81\x46\xfb\x95\x79\xd0\xf3\x2a\xc4\x1b\x0d\xa1\x01\x88\x15\x6b\x3c\xac\xe7\x15\xe7\x52\xd9\x2f\x61\x26\xb5\x4b\x6a\xad\x85\x87\x99\x74\x86\x8b\x2f\xe2\x9a\x6b\x5c\x05\xbe\x4a\xda\x08\xfe\x7a\xf6\xdd\xec\x35\x97\xa1\x9f\xcf\x68\x54\x3d\xc6\xba\x08\x84\x33\x94\x85\x42\xeb\x7e\x59\xcd\xbb\x0d\xd5\x2b\xa7\x6e\x16\x93\x49\xad\xf0\x8a\x49\x4d\xba\xf3\x4a\x3a\x1b\x05\x5a\xf0\x83\x79\x2b\x6e\x65\x34\xec\xdf\x16\xc9\xce\x2a\x92\x4c\x35\xac\xe3\x8e\xb8\xa8\x88\x5d\x05\x8c\x60\x0e\x14\x8a\x52\xf3\x66\xd0\x2a\x41\xab\x86\x10\x36\x6f\x0e\xac\x71\xb1\xe3\x9d\x93\xfb\xd3\x60\x3c\x6e\x9a\xc8\xf2\xc8\x80\x4d\x0f\xc3\x1a\xe2\xa5\x9c\x0c\x23\x18\x89\x20\x9f\x4e\x63\x79\xc0\xa6\x1f\x31\x78\xf1\xe7\xe5\xf9\xf2\xf2\xa9\x26\x9b\x18\xdb\xf0\x03\xe7\x23\x86\x7f\xfe\xb8\xfc\xe5\xf3\x4f\x8f\x8a\x5b\xcd\xc9\x6e\x66\x43\x79\x33\xa9\x03\xc8\x88\xce\x0e\x4e\xfb\xe9\xc0\x83\x7b\x38\x52\xe4\x07\x59\x64\x8d\x08\xd3\x08\xd7\x71\x2a\xc1\x46\xf0\xa0\x46\xf3\x5a\x37\x6f\x6f\xfd\xa5\xd5\xc9\x95\x7b\xfb\xf9\xd5\x79\x30\x0c\xdb\x90\x0c\x53\x4e\x3b\xcf\x02\x46\x26\xa8\x32\xcf\x18\x41\xcb\xb8\x21\x26\xcf\x84\xc2\x16\x03\x4a\xb4\x1b\x06\x1a\xe3\x8c\x5d\x64\xe9\x36\x25\x9b\xc5\x0a\x56\x18\x31\x30\x10\xdb\x04\x0c\xc5\x4e\x88\x9a\xb7\x43\x84\x4a\x68\x6a\xde\xc7\xe2\xdb\xa3\xb4\x27\xd7\xc9\xd8\x43\xb6\x1d\x6b\x54\x8b\x03\xae\x9f\x52\x3b\xae\xac\x5b\x02\xad\x52\x8c\x84\x19\xc3\xb4\xf5\x68\x84\xbf\xc9\x43\x97\x22\xf5\x0e\x50\xe5\x75\xd2\x1a\x54\x57\x36\x23\x96\xf2\xf3\x17\xc2\x3f\xec\x93\x30\xad\x86\x63\x4f\x47\xdc\x7d\x46\xc8\x68\xd7\xee\x04\xde\x91\x9e\x33\x3c\x17\x1e\x44\x04\x56\x38\xf7\x6c\x78\x0f\xbb\xce\x6e\x31\x3d\x37\x55\xee\x2a\xe3\x64\x59\x7c\xa0\x2d\x26\x0f\xe1\x8e\xb1\xe3\xc0\x1f\x43\xb2\x91\x54\xf8\x88\x92\x1c\xf7\x8a\x06\x14\x8a\x13\xc1\xde\x35\x58\xf4\xa6\x79\x4b\x84\xf3\x84\xfe\x58\x00\xee\xd7\xee\x42\xf2\x6e\xa1\x4b\xf1\x97\xbf\xb4\xeb\x77\xf7\x2f\x78\x7a\xa7\x78\x8f\x1b\x8b\x21\xa0\x71\xd4\x20\xe8\x37\x94\xb5\xde\x5d\xa1\x22\x8c\x6c\x9b\x44\x40\x16\x04\xb4\xf0\x23\x3b\x67\x42\xe3\x36\xa1\xea\xec\x93\x37\x95\x24\x9a\x44\xab\xae\xc0\x22\x44\x86\xea\x8c\x08\x4b\x4c\xd4\x62\xe5\x3c\x01\x69\x5d\xb6\x9b\xc2\x19\x59\x22\xeb\x1e\xda\x44\x01\xb3\x4a\x00\x19\x6d\x31\x27\x97\x60\x92\xa3\x8c\x35\xa4\x20\x09\x1b\xe1\xbd\xa2\x3c\xb5\x91\x28\x1d\x6e\x87\xc9\xbc\x3a\x1d\xdd\x63\x42\x3f\x20\xa2\x9a\xe8\x12\xfe\x5c\x95\xfc\x3f\xa6\xcf\x79\x64\x6b\x21\xa9\x48\xcb\x8a\xcc\x04\x61\xe8\x9f\x77\xc4\x18\x29\x53\x10\x25\xff\x85\x3a\x24\x10\x64\x4f\xc4\xfc\x2b\xa4\x40\x93\x6e\x44\x96\x89\x93\x42\x74\xcc\x88\x8d\x25\x95\xa2\x47\x3c\x13\x67\x2c\x63\xf2\x90\x99\x44\x34\xc2\x6c\x02\x18\x9d\x0d\x5a\xe7\x05\x4b\x71\x20\xc7\x1d\x4b\xc0\xcc\xfe\x73\x96\x0c\x67\x8a\xf1\x64\xbd\xb4\xa4\x97\x96\xf4\x28\xd1\x4b\x4b\x3a\x7c\x5e\x5a\xd2\x37\xb6\xa4\x9d\xe1\xde\x59\x6d\xed\x1c\x1d\xaa\x86\xec\x75\xb3\x27\x1d\xea\x4b\xda\x1f\xbc\xc3\xd4\xed\xc8\x3e\x42\xf4\xce\x6e\x86\x6b\x52\x3f\x63\xab\x9b\x7c\x2a\xde\xbf\xf8\x6d\x30\x36\x69\x55\xbe\x14\x5c\xa7\x2d\x25\x79\x0d\x76\x53\x2d\xee\xc6\xf9\x80\x7b\x1c\xe3\x65\x43\xd9\x77\xc9\x4b\x2a\x01\xa7\xe8\xd2\x13\x98\x46\x42\x18\xe8\x50\xbd\xe7\x83\x5c\xb8\x96\xde\x17\xdd\x99\xf3\x1b\xde\xeb\x05\x6e\x30\x4e\xfb\xc9\xac\x6d\x5a\xba\xd5\x7d\x5c\x1e\x7b\xab\x79\x7b\x7f\xe8\xbb\x08\xe7\xc8\xf3\xee\x2b\x04\x71\x3f\x7f\x7d\xf9\x37\x00\x00\xff\xff\x01\x87\x79\x20\x8d\x11\x00\x00")

func assetsWebIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsWebIndexHtml,
		"assets/web/index.html",
	)
}

func assetsWebIndexHtml() (*asset, error) {
	bytes, err := assetsWebIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/web/index.html", size: 4493, mode: os.FileMode(420), modTime: time.Unix(1484537963, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsWebRHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\xb0\xba\x16\x36\xb3\xed\xa5\x28\x64\x03\xf9\x50\x37\x41\xbb\x75\xb0\x51\x0e\x3d\x52\xd2\xd8\x62\x42\x91\x2c\x49\x2d\xe2\x7f\xdf\x21\x25\xa5\xb6\x2c\x25\x72\x6a\xa4\x28\xd0\x1c\x12\x92\xf3\x66\x38\x7e\x7c\xe6\x70\x12\x7f\x77\xbd\xba\x4a\xff\xb8\x4b\x48\xe9\x2a\xb1\x3c\x8b\xfd\x1f\x22\x98\xdc\x2c\x22\x90\x91\x5f\x00\x56\x2c\xcf\x08\xfe\xc4\x15\x38\x46\xf2\x92\x19\x0b\x6e\x11\x3d\xa4\xbf\xcc\x7e\x8a\x5a\x93\xe3\x4e\xc0\xf2\x8b\xca\x9f\x4c\x4c\x9b\x49\x63\x10\x5c\x3e\x11\x03\x62\x11\x59\xb7\x15\x60\x4b\x00\x17\x91\xd2\xc0\x7a\x11\x51\x9a\x17\xf2\xd1\xce\x73\xa1\xea\x62\x2d\x98\x81\x79\xae\x2a\xca\x1e\xd9\x33\x15\x3c\xb3\x34\xab\x45\xc5\xe8\xf9\xfc\xc7\xf9\x39\xcd\x6d\x3b\x9f\xe3\x28\x9a\x12\x9d\x59\xcc\xd3\x06\x47\x26\x44\xeb\x16\xd3\xe6\x03\xc5\x99\x2a\xb6\xcb\xb3\xb3\xb8\xe0\xdf\x48\x2e\x10\xbb\x88\x72\x25\x1d\xe3\x12\x4c\x17\x5e\xb2\x17\x1b\x0e\xdb\xd5\x60\xd9\xf1\x42\xcb\x4c\xc0\xda\xed\x98\x03\x84\xed\x02\xb8\x83\xaa\x07\x08\xa0\xf2\x53\x87\x0a\xa4\x45\x1d\x85\xe5\xa7\x5e\x34\xca\x76\x76\xa7\xb8\xfd\x78\x32\x86\x6f\x4a\x47\xfc\xa8\x02\x59\xbf\x9d\x56\xc7\x57\xa1\x72\x3b\x90\x23\x0a\xe4\x7e\x3c\x97\x37\x62\x9a\x81\x80\x57\x5f\x93\x8b\x34\x79\x6f\xc8\xd2\x39\x6d\x7f\xa6\x74\x20\xf0\xe7\xdb\xf4\xe6\xe1\x72\x12\x6f\x31\xc5\xb8\x5e\x0d\x61\x65\xb2\x0a\x34\x93\x20\x76\x75\xa0\xf7\x2c\x33\xaf\x2d\x2e\x37\xbd\xdc\x2e\x6b\x2e\x0a\x30\x3b\x79\xe8\xe1\xd3\x6b\x82\x64\x02\x35\xd0\x3f\xb6\x5e\x82\x46\x89\x21\x39\x4d\x42\x05\xa4\x60\x19\x88\x0e\x1b\x26\xd1\xf2\xde\x31\x57\xdb\x98\x86\xe9\x40\xf4\x7d\xd9\x1d\x72\xd0\x6e\x49\x4a\x66\x67\xac\x28\x94\x1c\x92\x53\x70\xe1\x52\xd7\x8e\xb8\xad\x06\x3c\xe0\xba\xca\x90\x6c\xa2\x05\xcb\xa1\x54\x9e\xa9\x45\xf4\xc3\xf9\x79\xd4\x85\x0d\xe0\x29\x91\x1c\x3c\xbb\x5e\x9c\xd5\xaf\xd3\xc2\xbc\xc8\x2d\xab\x9d\x53\x78\xf1\x7d\x7f\x20\xc9\x86\x02\x7d\x72\xd6\x6f\x50\x33\x60\x3e\x9c\xf6\x01\xb2\x24\xab\xe0\x24\xac\x7f\x63\xa2\x9e\x18\xe9\x5f\x24\xfe\x4a\xa9\x27\x0e\xff\x13\xff\xe1\xc4\x7f\x05\xab\x91\x2c\x20\x97\x58\x83\x3f\x82\x7e\xcf\x14\xbe\x2e\x5e\x3e\x72\x37\xef\xb1\xe7\x9f\x04\xc4\x47\x05\x89\xb4\xe1\x3b\xa6\x85\xbd\x9f\x15\xc2\xed\x6c\x63\x54\xad\xa1\x18\xcb\x6d\x32\x95\xa3\x74\x7e\x01\x57\xaa\x62\x94\xc7\x57\xb8\x1c\xe4\x73\x2c\x51\x8b\xd5\xa9\x83\x5a\x10\x90\x8f\x49\xab\x41\x07\xc4\x38\x20\x80\x94\x76\x5c\xc9\xe5\xe7\x24\x8d\x69\x3b\x9e\xe4\x70\xb7\xba\x3f\xd6\xe3\xe1\x58\x87\x8b\xf4\xea\xe6\x38\x97\xeb\xe4\xb7\x24\x4d\x8e\xf3\xb9\x49\x2e\xae\x8f\xf3\x58\xdd\xa5\xb7\xab\xdf\xef\xdf\x76\x8a\xe9\x6b\x67\x80\x56\x3c\xcf\x31\xdb\x80\xba\x83\xe1\x9f\x8b\xb5\xe2\x15\xa4\x78\x7d\xfd\xe7\xe4\xda\xf1\xcf\xb4\x16\x3c\x67\x7e\x4c\x1f\xad\x92\x53\x4e\xaf\xf3\xf5\x17\x0a\xf5\x1d\xd6\xd1\x4e\x78\x4f\xf1\x09\x5b\x9d\xf8\xcc\xc7\xae\xe0\x57\x2f\x3a\x3f\xd4\xb5\x10\x50\x34\x9d\xc8\xd8\x01\x4d\x3c\xc8\x80\x6d\x6a\xd4\x7e\xc5\xf2\xfb\xf8\xfe\x2f\xd4\x13\x70\x31\x6d\x96\x8f\x95\xf4\x29\xd2\xd0\x86\x57\xcc\x6c\xf1\x49\x81\xd5\xc2\xc1\x3b\x52\x19\x60\xba\xdf\xe5\x8d\x35\x2f\x71\x66\xf0\xd7\x5a\x29\x07\xa6\x4b\xad\x99\x75\x0d\xcc\x2b\xcd\xcd\x90\x1d\xab\x5f\xa8\xa9\x5e\x78\xb3\x1c\x67\x60\x0e\xca\x57\x3c\xf4\x19\x2c\xf2\x27\x37\x5d\x0b\xdb\xce\x48\xb6\xf5\x8f\x8d\xfd\xe6\x6d\xc3\x5d\x59\x67\xa1\xdb\x7f\xae\xff\xc4\x8e\x69\x0d\xbe\x6b\xfa\x7b\xec\xdf\x22\xf3\x83\x1d\xd2\x12\x88\x55\xb5\xc9\x01\xcb\x74\x01\x48\x3d\xc1\xef\x22\xe0\x53\xa2\xd8\xdf\x03\xb7\x50\x1a\xd7\x03\x76\xae\xcc\x86\xb6\x38\x4b\x2b\xee\x66\xed\x64\xae\x4b\x8d\xe5\xf3\x36\x3d\xdc\x6d\xbf\x45\xdb\xa5\xbe\xe1\x9c\x36\x0c\xfb\x51\xf3\x8f\x84\x38\x7c\xaf\x97\x7f\x05\x00\x00\xff\xff\xb7\x3c\x2e\x0a\x50\x11\x00\x00")

func assetsWebRHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsWebRHtml,
		"assets/web/r.html",
	)
}

func assetsWebRHtml() (*asset, error) {
	bytes, err := assetsWebRHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/web/r.html", size: 4432, mode: os.FileMode(420), modTime: time.Unix(1484550714, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/admin/index.html": assetsAdminIndexHtml,
	"assets/css/all.css":      assetsCssAllCss,
	"assets/js/hello.js":      assetsJsHelloJs,
	"assets/web/index.html":   assetsWebIndexHtml,
	"assets/web/r.html":       assetsWebRHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"admin": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{assetsAdminIndexHtml, map[string]*bintree{}},
		}},
		"css": &bintree{nil, map[string]*bintree{
			"all.css": &bintree{assetsCssAllCss, map[string]*bintree{}},
		}},
		"js": &bintree{nil, map[string]*bintree{
			"hello.js": &bintree{assetsJsHelloJs, map[string]*bintree{}},
		}},
		"web": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{assetsWebIndexHtml, map[string]*bintree{}},
			"r.html":     &bintree{assetsWebRHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
